{
  "stats": {
    "suites": 4,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2021-12-14T04:56:29.540Z",
    "end": "2021-12-14T04:56:29.748Z",
    "duration": 208,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d4731944-3b7f-471a-aed5-473a36e910d9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a3ff2b7e-bf35-41e3-a1cd-67e9a6871699",
          "title": "Create a customer, update it and then delete all customers",
          "fullFile": "/home/juan/atsea-tests/test/api/createAndGetCustomer.test.ts",
          "file": "/test/api/createAndGetCustomer.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create customer",
              "fullTitle": "Create a customer, update it and then delete all customers Create customer",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n//El customer id que se envÃ­e no importa finalmente, no necesariamente se recibe el mismo\n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent2.post(`${urlBase2}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\nexpect(response.body).length>0;\n//201 = created\nexpect(response.status).equal(201)\nid = response.body.customerId",
              "err": {},
              "uuid": "b61563fd-cd1c-4546-b390-643b41e090cd",
              "parentUUID": "a3ff2b7e-bf35-41e3-a1cd-67e9a6871699",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to create a customer with the same username (should return conflict)",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to create a customer with the same username (should return conflict)",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nawait agent2.post(`${urlBase2}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json')\n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(409);\n  })",
              "err": {},
              "uuid": "e0f2280d-d439-4d25-8280-26f506bb5a08",
              "parentUUID": "a3ff2b7e-bf35-41e3-a1cd-67e9a6871699",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update customer and check updated schema",
              "fullTitle": "Create a customer, update it and then delete all customers Update customer and check updated schema",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizados = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 9997\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallynewpassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent2.put(`${urlBase2}/api/customer/${id}`)\n  .send(datosActualizados)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n  expect(response.status).to.equal(200)\n  expect(response.body).to.be.jsonSchema(customerSchema.putCustomerSchema);\n  newId = response.body.customerId\n  newAddress = response.body.address",
              "err": {},
              "uuid": "c40a7424-dc06-4c07-96b7-9c55552e590e",
              "parentUUID": "a3ff2b7e-bf35-41e3-a1cd-67e9a6871699",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to update customer using an Id that doesn't exist",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to update customer using an Id that doesn't exist",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizados = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 9997\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallynewpassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nawait agent2.put(`${urlBase2}/api/customer/-1`)\n  .send(datosActualizados)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json')\n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(404);\n  })",
              "err": {},
              "uuid": "679d4b85-e5fc-41de-82b9-9edacc0add50",
              "parentUUID": "a3ff2b7e-bf35-41e3-a1cd-67e9a6871699",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get updated customer's address and schema by Id",
              "fullTitle": "Create a customer, update it and then delete all customers Get updated customer's address and schema by Id",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent2.get(`${urlBase2}/api/customer/${newId}`)\n  .set('User-Agent', 'agent');    \n\nexpect(response.status).to.equal(200)\nexpect(response.body).to.be.jsonSchema(customerSchema.getCustomerSchema);\nexpect(response.body.address).to.equal(newAddress)",
              "err": {},
              "uuid": "5694d554-571c-4edf-8e05-edbc33900ca2",
              "parentUUID": "a3ff2b7e-bf35-41e3-a1cd-67e9a6871699",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to get a customer using an Id that doesn't exist",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to get a customer using an Id that doesn't exist",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent2.get(`${urlBase2}/api/customer/-1`)\n  .set('User-Agent', 'agent')    \n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(404);\n  })",
              "err": {},
              "uuid": "c5990455-9b05-4564-9962-d7f575125eaa",
              "parentUUID": "a3ff2b7e-bf35-41e3-a1cd-67e9a6871699",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete all costumers",
              "fullTitle": "Create a customer, update it and then delete all customers Delete all costumers",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent2.delete(`${urlBase2}/api/customer/`)\n  .set('User-Agent', 'agent')\n  //201 = no content\n  expect(response.status).to.equal(204)",
              "err": {},
              "uuid": "c3968c2c-9cbb-43c0-baa6-1e4611a1f76b",
              "parentUUID": "a3ff2b7e-bf35-41e3-a1cd-67e9a6871699",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b61563fd-cd1c-4546-b390-643b41e090cd",
            "e0f2280d-d439-4d25-8280-26f506bb5a08",
            "c40a7424-dc06-4c07-96b7-9c55552e590e",
            "679d4b85-e5fc-41de-82b9-9edacc0add50",
            "5694d554-571c-4edf-8e05-edbc33900ca2",
            "c5990455-9b05-4564-9962-d7f575125eaa",
            "c3968c2c-9cbb-43c0-baa6-1e4611a1f76b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b31c1678-c950-4aba-b070-463e14b040b3",
          "title": "Get all products",
          "fullFile": "/home/juan/atsea-tests/test/api/getAllProducts.test.ts",
          "file": "/test/api/getAllProducts.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get all products",
              "fullTitle": "Get all products Get all products",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent.get(`${urlBase}/api/product/`)\n  .set('User-Agent', 'agent');\nchai.expect(response.status).to.equal(statusCode.StatusCodes.OK);\nchai.expect(response.body).length>0;",
              "err": {},
              "uuid": "04f89653-7728-4706-9ef4-a7ad2f028c64",
              "parentUUID": "b31c1678-c950-4aba-b070-463e14b040b3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04f89653-7728-4706-9ef4-a7ad2f028c64"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d5abf921-9fde-41b1-b1ae-ac9316c15c14",
          "title": "Create a customer, login, make a purchase and finally delete it",
          "fullFile": "/home/juan/atsea-tests/test/api/loginAndPurchase.test.ts",
          "file": "/test/api/loginAndPurchase.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create customer",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Create customer",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n//El customer id que se envÃ­e no importa finalmente, no necesariamente se recibe el mismo\n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent3.post(`${urlBase3}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\n//201 = created\nchai2.expect(response.status).equal(201)\nchai2.expect(response.body).length>0;\nid = response.body.customerId",
              "err": {},
              "uuid": "1299a8e3-7b44-4554-9e9c-449645ace990",
              "parentUUID": "d5abf921-9fde-41b1-b1ae-ac9316c15c14",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Login",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv', password: 'sallypassword' })\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(200);\n      token = response.body.token",
              "err": {},
              "uuid": "9aafb8f4-6046-4c03-a4da-4c92e0a59335",
              "parentUUID": "d5abf921-9fde-41b1-b1ae-ac9316c15c14",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to login with wrong password",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to login with wrong password",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv', password: 'sallypassword2' })\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //401 = unauthorized\n    chai2.expect(error.status).to.equal(401);\n  });",
              "err": {},
              "uuid": "a201c510-973b-4ba0-b00b-0daff3e0a414",
              "parentUUID": "d5abf921-9fde-41b1-b1ae-ac9316c15c14",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to login with wrong username",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to login with wrong username",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv2', password: 'sallypassword' })\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //401 = unauthorized\n    chai2.expect(error.status).to.equal(404);\n  });",
              "err": {},
              "uuid": "105f82f6-476a-457b-8d09-7aba0553ea3e",
              "parentUUID": "d5abf921-9fde-41b1-b1ae-ac9316c15c14",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Purchase",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Purchase",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.get(`${urlBase3}/purchase/`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(200);\n      chai2.expect(response.body).length>0;",
              "err": {},
              "uuid": "8ec22441-0b10-4b52-a18f-ce93a3d800a3",
              "parentUUID": "d5abf921-9fde-41b1-b1ae-ac9316c15c14",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete customer",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Delete customer",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.delete(`${urlBase3}/api/customer/${id}`)\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(204);",
              "err": {},
              "uuid": "b4fa8b67-ba78-44da-b65b-51d353bcadbb",
              "parentUUID": "d5abf921-9fde-41b1-b1ae-ac9316c15c14",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to purchase without logging in",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to purchase without logging in",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.get(`${urlBase3}/purchase/`)\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //500 = Internal server error\n    chai2.expect(error.status).to.equal(500);\n});",
              "err": {},
              "uuid": "c3b1f92b-a751-4f5e-8192-7466ba2b080d",
              "parentUUID": "d5abf921-9fde-41b1-b1ae-ac9316c15c14",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1299a8e3-7b44-4554-9e9c-449645ace990",
            "9aafb8f4-6046-4c03-a4da-4c92e0a59335",
            "a201c510-973b-4ba0-b00b-0daff3e0a414",
            "105f82f6-476a-457b-8d09-7aba0553ea3e",
            "8ec22441-0b10-4b52-a18f-ce93a3d800a3",
            "b4fa8b67-ba78-44da-b65b-51d353bcadbb",
            "c3b1f92b-a751-4f5e-8192-7466ba2b080d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 73,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6568e10f-cab5-4a32-87b7-0e4c0516a3e0",
          "title": "Perform databasehealthchek and check container Id using schemas",
          "fullFile": "/home/juan/atsea-tests/test/api/systemUtilities.test.ts",
          "file": "/test/api/systemUtilities.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Databasehealthcheck",
              "fullTitle": "Perform databasehealthchek and check container Id using schemas Databasehealthcheck",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent4.get(`${urlBase4}utility/healthcheck/`)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\nchai3.expect(response.status).equal(200)\nchai3.expect(response.body).to.be.jsonSchema(utilitiesSchema.getDatabaseHealthcheck);",
              "err": {},
              "uuid": "12755491-e889-4b61-83df-ebea8a8994bb",
              "parentUUID": "6568e10f-cab5-4a32-87b7-0e4c0516a3e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login",
              "fullTitle": "Perform databasehealthchek and check container Id using schemas Login",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent4.get(`${urlBase4}utility/containerid/`)\n  .set('User-Agent', 'agent');    \n\n      chai3.expect(response.status).to.equal(200);\n      chai3.expect(response.body).to.be.jsonSchema(utilitiesSchema.getContainerId);",
              "err": {},
              "uuid": "e3f19573-bf72-4daf-ac0f-bad00d3fcc39",
              "parentUUID": "6568e10f-cab5-4a32-87b7-0e4c0516a3e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "12755491-e889-4b61-83df-ebea8a8994bb",
            "e3f19573-bf72-4daf-ac0f-bad00d3fcc39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}