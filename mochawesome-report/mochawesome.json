{
  "stats": {
    "suites": 4,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2021-12-12T09:48:24.875Z",
    "end": "2021-12-12T09:48:25.679Z",
    "duration": 804,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "aac80fa9-b73f-4e6f-a771-20aeb48408d7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "36c880f7-3478-4a06-bd9a-d4f97116211f",
          "title": "Create a customer, update it and then delete all customers",
          "fullFile": "/home/juan/atsea-tests/test/api/createAndGetCustomer.test.ts",
          "file": "/test/api/createAndGetCustomer.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create customer",
              "fullTitle": "Create a customer, update it and then delete all customers Create customer",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n//El customer id que se envÃ­e no importa finalmente, no necesariamente se recibe el mismo\n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent2.post(`${urlBase2}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\nexpect(response.body).length>0;\n//201 = created\nexpect(response.status).equal(201)\nid = response.body.customerId",
              "err": {},
              "uuid": "dee2e298-398c-4608-b975-1430f254be0e",
              "parentUUID": "36c880f7-3478-4a06-bd9a-d4f97116211f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to create a customer with the same username (should return conflict)",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to create a customer with the same username (should return conflict)",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nawait agent2.post(`${urlBase2}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json')\n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(409);\n  })",
              "err": {},
              "uuid": "55874b43-d0c1-479e-8c5a-e8278dd849e6",
              "parentUUID": "36c880f7-3478-4a06-bd9a-d4f97116211f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update customer and check updated schema",
              "fullTitle": "Create a customer, update it and then delete all customers Update customer and check updated schema",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizados = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 9997\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallynewpassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent2.put(`${urlBase2}/api/customer/${id}`)\n  .send(datosActualizados)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n  expect(response.status).to.equal(200)\n  expect(response.body).to.be.jsonSchema(customerSchema.putCustomerSchema);\n  newId = response.body.customerId\n  newAddress = response.body.address",
              "err": {},
              "uuid": "60502461-2031-4341-b845-310dc4f11545",
              "parentUUID": "36c880f7-3478-4a06-bd9a-d4f97116211f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to update customer using an Id that doesn't exist",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to update customer using an Id that doesn't exist",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizados = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 9997\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallynewpassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nawait agent2.put(`${urlBase2}/api/customer/-1`)\n  .send(datosActualizados)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json')\n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(404);\n  })",
              "err": {},
              "uuid": "a50623d8-8dc0-4247-a8ef-883afb6f1e9b",
              "parentUUID": "36c880f7-3478-4a06-bd9a-d4f97116211f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get updated customer's address and schema by Id",
              "fullTitle": "Create a customer, update it and then delete all customers Get updated customer's address and schema by Id",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent2.get(`${urlBase2}/api/customer/${newId}`)\n  .set('User-Agent', 'agent');    \n\nexpect(response.status).to.equal(200)\nexpect(response.body).to.be.jsonSchema(customerSchema.getCustomerSchema);\nexpect(response.body.address).to.equal(newAddress)",
              "err": {},
              "uuid": "73d84850-7d01-4f0c-88e5-667d927dd5d1",
              "parentUUID": "36c880f7-3478-4a06-bd9a-d4f97116211f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to get a customer using an Id that doesn't exist",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to get a customer using an Id that doesn't exist",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent2.get(`${urlBase2}/api/customer/-1`)\n  .set('User-Agent', 'agent')    \n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(404);\n  })",
              "err": {},
              "uuid": "38c3f6cc-1e24-4247-99e6-60caec276911",
              "parentUUID": "36c880f7-3478-4a06-bd9a-d4f97116211f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete all costumers",
              "fullTitle": "Create a customer, update it and then delete all customers Delete all costumers",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent2.delete(`${urlBase2}/api/customer/`)\n  .set('User-Agent', 'agent')\n  //201 = no content\n  expect(response.status).to.equal(204)",
              "err": {},
              "uuid": "226dd410-a44a-4820-9369-b552be62a34c",
              "parentUUID": "36c880f7-3478-4a06-bd9a-d4f97116211f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dee2e298-398c-4608-b975-1430f254be0e",
            "55874b43-d0c1-479e-8c5a-e8278dd849e6",
            "60502461-2031-4341-b845-310dc4f11545",
            "a50623d8-8dc0-4247-a8ef-883afb6f1e9b",
            "73d84850-7d01-4f0c-88e5-667d927dd5d1",
            "38c3f6cc-1e24-4247-99e6-60caec276911",
            "226dd410-a44a-4820-9369-b552be62a34c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 239,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "239195c0-5473-4a64-8e36-c8f07b423b61",
          "title": "Get all products",
          "fullFile": "/home/juan/atsea-tests/test/api/getAllProducts.test.ts",
          "file": "/test/api/getAllProducts.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get all products",
              "fullTitle": "Get all products Get all products",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent.get(`${urlBase}/api/product/`)\n  .set('User-Agent', 'agent');\nchai.expect(response.status).to.equal(statusCode.StatusCodes.OK);\nchai.expect(response.body).length>0;",
              "err": {},
              "uuid": "b70de1b6-4e31-4551-a585-f04602ca36c2",
              "parentUUID": "239195c0-5473-4a64-8e36-c8f07b423b61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b70de1b6-4e31-4551-a585-f04602ca36c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 39,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "63f7c44d-40b3-4e17-a771-20eb92f6cda9",
          "title": "Create a customer, login, make a purchase and finally delete it",
          "fullFile": "/home/juan/atsea-tests/test/api/loginAndPurchase.test.ts",
          "file": "/test/api/loginAndPurchase.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create customer",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Create customer",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n//El customer id que se envÃ­e no importa finalmente, no necesariamente se recibe el mismo\n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent3.post(`${urlBase3}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\n//201 = created\nchai2.expect(response.status).equal(201)\nchai2.expect(response.body).length>0;\nid = response.body.customerId",
              "err": {},
              "uuid": "197aeab0-237a-43a7-984e-3e427e24d728",
              "parentUUID": "63f7c44d-40b3-4e17-a771-20eb92f6cda9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Login",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv', password: 'sallypassword' })\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(200);\n      token = response.body.token",
              "err": {},
              "uuid": "cbea2bd3-1613-4bca-acde-a9fb6b0eff1a",
              "parentUUID": "63f7c44d-40b3-4e17-a771-20eb92f6cda9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to login with wrong password",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to login with wrong password",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv', password: 'sallypassword2' })\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //401 = unauthorized\n    chai2.expect(error.status).to.equal(401);\n  });",
              "err": {},
              "uuid": "43a70815-d1d5-4d24-9a3f-06a07c523e6c",
              "parentUUID": "63f7c44d-40b3-4e17-a771-20eb92f6cda9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to login with wrong username",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to login with wrong username",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv2', password: 'sallypassword' })\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //401 = unauthorized\n    chai2.expect(error.status).to.equal(404);\n  });",
              "err": {},
              "uuid": "349af49b-0aab-4635-9e18-1bbb3d1836e3",
              "parentUUID": "63f7c44d-40b3-4e17-a771-20eb92f6cda9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Purchase",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Purchase",
              "timedOut": false,
              "duration": 226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.get(`${urlBase3}/purchase/`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(200);\n      chai2.expect(response.body).length>0;",
              "err": {},
              "uuid": "d31388c5-8152-46a9-8625-8c94a03cfec3",
              "parentUUID": "63f7c44d-40b3-4e17-a771-20eb92f6cda9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete customer",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Delete customer",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.delete(`${urlBase3}/api/customer/${id}`)\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(204);",
              "err": {},
              "uuid": "17203d0e-3fad-4b4c-a42a-066d751694c4",
              "parentUUID": "63f7c44d-40b3-4e17-a771-20eb92f6cda9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to purchase without logging in",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to purchase without logging in",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.delete(`${urlBase3}/api/customer/${id}`)\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //500 = Internal server error\n    chai2.expect(error.status).to.equal(404);\n});",
              "err": {},
              "uuid": "ec68ec08-b5c5-45be-90f5-4cd0d0baa7be",
              "parentUUID": "63f7c44d-40b3-4e17-a771-20eb92f6cda9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "197aeab0-237a-43a7-984e-3e427e24d728",
            "cbea2bd3-1613-4bca-acde-a9fb6b0eff1a",
            "43a70815-d1d5-4d24-9a3f-06a07c523e6c",
            "349af49b-0aab-4635-9e18-1bbb3d1836e3",
            "d31388c5-8152-46a9-8625-8c94a03cfec3",
            "17203d0e-3fad-4b4c-a42a-066d751694c4",
            "ec68ec08-b5c5-45be-90f5-4cd0d0baa7be"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 491,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0290bac3-861f-4d08-b4f5-6cdbd6bb9868",
          "title": "Perform databasehealthchek and check container Id using schemas",
          "fullFile": "/home/juan/atsea-tests/test/api/systemUtilities.test.ts",
          "file": "/test/api/systemUtilities.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Databasehealthcheck",
              "fullTitle": "Perform databasehealthchek and check container Id using schemas Databasehealthcheck",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent4.get(`${urlBase4}/healthcheck/`)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\nchai3.expect(response.status).equal(200)\nchai3.expect(response.body).to.be.jsonSchema(utilitiesSchema.getDatabaseHealthcheck);",
              "err": {},
              "uuid": "e0de2ae6-a2ab-4576-9c78-8bc3edc0e7cd",
              "parentUUID": "0290bac3-861f-4d08-b4f5-6cdbd6bb9868",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login",
              "fullTitle": "Perform databasehealthchek and check container Id using schemas Login",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent4.get(`${urlBase4}/containerid/`)\n  .set('User-Agent', 'agent');    \n\n      chai3.expect(response.status).to.equal(200);\n      chai3.expect(response.body).to.be.jsonSchema(utilitiesSchema.getContainerId);",
              "err": {},
              "uuid": "82b8ac5f-e307-472e-8e8a-b37f625ef19f",
              "parentUUID": "0290bac3-861f-4d08-b4f5-6cdbd6bb9868",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e0de2ae6-a2ab-4576-9c78-8bc3edc0e7cd",
            "82b8ac5f-e307-472e-8e8a-b37f625ef19f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}