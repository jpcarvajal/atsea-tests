{
  "stats": {
    "suites": 4,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2021-12-14T06:19:55.246Z",
    "end": "2021-12-14T06:19:55.932Z",
    "duration": 686,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "eca1a6b2-5b97-4504-9fb0-fb0d8d9000fe",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "924fa3f0-6859-4f6c-bb49-bdd82401662d",
          "title": "Create a customer, update it and then delete all customers",
          "fullFile": "/home/juan/atsea-tests/test/api/createAndGetCustomer.test.ts",
          "file": "/test/api/createAndGetCustomer.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create customer",
              "fullTitle": "Create a customer, update it and then delete all customers Create customer",
              "timedOut": false,
              "duration": 235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n//El customer id que se envÃ­e no importa finalmente, no necesariamente se recibe el mismo\n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent2.post(`${urlBase2}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\nexpect(response.body).length>0;\n//201 = created\nexpect(response.status).equal(201)\nid = response.body.customerId",
              "err": {},
              "uuid": "2f4b8f04-140f-431b-93b5-c678478ae7ce",
              "parentUUID": "924fa3f0-6859-4f6c-bb49-bdd82401662d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to create a customer with the same username (should return conflict)",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to create a customer with the same username (should return conflict)",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nawait agent2.post(`${urlBase2}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json')\n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(409);\n  })",
              "err": {},
              "uuid": "f8fee2fb-ed93-428e-87cd-95ffe3053f0e",
              "parentUUID": "924fa3f0-6859-4f6c-bb49-bdd82401662d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update customer and check updated schema",
              "fullTitle": "Create a customer, update it and then delete all customers Update customer and check updated schema",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizados = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 9997\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallynewpassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent2.put(`${urlBase2}/api/customer/${id}`)\n  .send(datosActualizados)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n  expect(response.status).to.equal(200)\n  expect(response.body).to.be.jsonSchema(customerSchema.putCustomerSchema);\n  newId = response.body.customerId\n  newAddress = response.body.address",
              "err": {},
              "uuid": "bd4b92a4-760b-4f9f-8f94-41b7cb48c1be",
              "parentUUID": "924fa3f0-6859-4f6c-bb49-bdd82401662d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to update customer using an Id that doesn't exist",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to update customer using an Id that doesn't exist",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizados = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 9997\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallynewpassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nawait agent2.put(`${urlBase2}/api/customer/-1`)\n  .send(datosActualizados)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json')\n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(404);\n  })",
              "err": {},
              "uuid": "5ac2ed5b-1c8d-42a9-84cb-5f815c2650be",
              "parentUUID": "924fa3f0-6859-4f6c-bb49-bdd82401662d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get updated customer's address and schema by Id",
              "fullTitle": "Create a customer, update it and then delete all customers Get updated customer's address and schema by Id",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent2.get(`${urlBase2}/api/customer/${newId}`)\n  .set('User-Agent', 'agent');    \n\nexpect(response.status).to.equal(200)\nexpect(response.body).to.be.jsonSchema(customerSchema.getCustomerSchema);\nexpect(response.body.address).to.equal(newAddress)",
              "err": {},
              "uuid": "8dbd8392-fc4a-479f-8a9a-44eec03163bc",
              "parentUUID": "924fa3f0-6859-4f6c-bb49-bdd82401662d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to get a customer using an Id that doesn't exist",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to get a customer using an Id that doesn't exist",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent2.get(`${urlBase2}/api/customer/-1`)\n  .set('User-Agent', 'agent')    \n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(404);\n  })",
              "err": {},
              "uuid": "3c55fcc1-9ae9-4343-872e-932af888ecfa",
              "parentUUID": "924fa3f0-6859-4f6c-bb49-bdd82401662d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete all costumers",
              "fullTitle": "Create a customer, update it and then delete all customers Delete all costumers",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent2.delete(`${urlBase2}/api/customer/`)\n  .set('User-Agent', 'agent')\n  //201 = no content\n  expect(response.status).to.equal(204)",
              "err": {},
              "uuid": "3d07c6ce-f966-4afa-8b77-c34261bbab60",
              "parentUUID": "924fa3f0-6859-4f6c-bb49-bdd82401662d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f4b8f04-140f-431b-93b5-c678478ae7ce",
            "f8fee2fb-ed93-428e-87cd-95ffe3053f0e",
            "bd4b92a4-760b-4f9f-8f94-41b7cb48c1be",
            "5ac2ed5b-1c8d-42a9-84cb-5f815c2650be",
            "8dbd8392-fc4a-479f-8a9a-44eec03163bc",
            "3c55fcc1-9ae9-4343-872e-932af888ecfa",
            "3d07c6ce-f966-4afa-8b77-c34261bbab60"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 396,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e1ad5d33-89a8-4106-85fc-fa739702eab8",
          "title": "Get all products",
          "fullFile": "/home/juan/atsea-tests/test/api/getAllProducts.test.ts",
          "file": "/test/api/getAllProducts.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get all products",
              "fullTitle": "Get all products Get all products",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent.get(`${urlBase}/api/product/`)\n  .set('User-Agent', 'agent');\nchai.expect(response.status).to.equal(statusCode.StatusCodes.OK);\nchai.expect(response.body).length>0;",
              "err": {},
              "uuid": "73b351a9-0ee8-4f2c-ab8c-99056df404d5",
              "parentUUID": "e1ad5d33-89a8-4106-85fc-fa739702eab8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "73b351a9-0ee8-4f2c-ab8c-99056df404d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "58ee8281-9fe1-46ff-b7f1-bc5a52e4883a",
          "title": "Create a customer, login, make a purchase and finally delete it",
          "fullFile": "/home/juan/atsea-tests/test/api/loginAndPurchase.test.ts",
          "file": "/test/api/loginAndPurchase.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create customer",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Create customer",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n//El customer id que se envÃ­e no importa finalmente, no necesariamente se recibe el mismo\n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent3.post(`${urlBase3}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\n//201 = created\nchai2.expect(response.status).equal(201)\nchai2.expect(response.body).length>0;\nid = response.body.customerId",
              "err": {},
              "uuid": "3d6960bc-119a-4e88-9703-eacc582aa20b",
              "parentUUID": "58ee8281-9fe1-46ff-b7f1-bc5a52e4883a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Login",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv', password: 'sallypassword' })\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(200);\n      token = response.body.token",
              "err": {},
              "uuid": "e1b6453f-ed79-4944-8c25-39c7ad6ae5c3",
              "parentUUID": "58ee8281-9fe1-46ff-b7f1-bc5a52e4883a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to login with wrong password",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to login with wrong password",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv', password: 'sallypassword2' })\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //401 = unauthorized\n    chai2.expect(error.status).to.equal(401);\n  });",
              "err": {},
              "uuid": "07a6e015-a2f4-4896-856a-ef8b55e53d40",
              "parentUUID": "58ee8281-9fe1-46ff-b7f1-bc5a52e4883a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to login with wrong username",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to login with wrong username",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv2', password: 'sallypassword' })\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //401 = unauthorized\n    chai2.expect(error.status).to.equal(404);\n  });",
              "err": {},
              "uuid": "803ac364-714f-4514-8e5e-8df51d9de54d",
              "parentUUID": "58ee8281-9fe1-46ff-b7f1-bc5a52e4883a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Purchase",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Purchase",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.get(`${urlBase3}/purchase/`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(200);\n      chai2.expect(response.body).length>0;",
              "err": {},
              "uuid": "231f393f-2937-49ac-a468-5cb3a8bb3d60",
              "parentUUID": "58ee8281-9fe1-46ff-b7f1-bc5a52e4883a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete customer",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Delete customer",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.delete(`${urlBase3}/api/customer/${id}`)\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(204);",
              "err": {},
              "uuid": "892e75fd-f891-4f79-bee1-a014685466e3",
              "parentUUID": "58ee8281-9fe1-46ff-b7f1-bc5a52e4883a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to purchase without logging in",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to purchase without logging in",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.get(`${urlBase3}/purchase/`)\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //500 = Internal server error\n    chai2.expect(error.status).to.equal(500);\n});",
              "err": {},
              "uuid": "ee1e6a4e-6054-4546-8927-9bafbc083fbf",
              "parentUUID": "58ee8281-9fe1-46ff-b7f1-bc5a52e4883a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d6960bc-119a-4e88-9703-eacc582aa20b",
            "e1b6453f-ed79-4944-8c25-39c7ad6ae5c3",
            "07a6e015-a2f4-4896-856a-ef8b55e53d40",
            "803ac364-714f-4514-8e5e-8df51d9de54d",
            "231f393f-2937-49ac-a468-5cb3a8bb3d60",
            "892e75fd-f891-4f79-bee1-a014685466e3",
            "ee1e6a4e-6054-4546-8927-9bafbc083fbf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 196,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8eeebcd1-28f4-41bc-ba4f-a7844044e2de",
          "title": "Perform databasehealthchek and check container Id using schemas",
          "fullFile": "/home/juan/atsea-tests/test/api/systemUtilities.test.ts",
          "file": "/test/api/systemUtilities.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Databasehealthcheck",
              "fullTitle": "Perform databasehealthchek and check container Id using schemas Databasehealthcheck",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent4.get(`${urlBase4}utility/healthcheck/`)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\nchai3.expect(response.status).equal(200)\nchai3.expect(response.body).to.be.jsonSchema(utilitiesSchema.getDatabaseHealthcheck);",
              "err": {},
              "uuid": "cf61f913-7910-4345-b83a-7117dff2d8a5",
              "parentUUID": "8eeebcd1-28f4-41bc-ba4f-a7844044e2de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login",
              "fullTitle": "Perform databasehealthchek and check container Id using schemas Login",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent4.get(`${urlBase4}utility/containerid/`)\n  .set('User-Agent', 'agent');    \n\n      chai3.expect(response.status).to.equal(200);\n      chai3.expect(response.body).to.be.jsonSchema(utilitiesSchema.getContainerId);",
              "err": {},
              "uuid": "8f8caaeb-d216-4758-a77f-0f9e306db67b",
              "parentUUID": "8eeebcd1-28f4-41bc-ba4f-a7844044e2de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf61f913-7910-4345-b83a-7117dff2d8a5",
            "8f8caaeb-d216-4758-a77f-0f9e306db67b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 62,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}