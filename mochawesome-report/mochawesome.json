{
  "stats": {
    "suites": 4,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2021-12-12T02:52:38.157Z",
    "end": "2021-12-12T02:52:38.925Z",
    "duration": 768,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7e6ab133-7550-4467-b348-5c2269565e88",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1d088ddf-91e1-4c37-b518-40b8078f36f8",
          "title": "Create a customer, update it and then delete all customers",
          "fullFile": "/home/juan/atsea-tests/test/api/createAndGetCustomer.test.ts",
          "file": "/test/api/createAndGetCustomer.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create customer",
              "fullTitle": "Create a customer, update it and then delete all customers Create customer",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n//El customer id que se envÃ­e no importa finalmente, no necesariamente se recibe el mismo\n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent2.post(`${urlBase2}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\nexpect(response.body).length>0;\n//201 = created\nexpect(response.status).equal(201)\nid = response.body.customerId",
              "err": {},
              "uuid": "52332273-8339-437e-a340-673e5fd3ee63",
              "parentUUID": "1d088ddf-91e1-4c37-b518-40b8078f36f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to create a customer with the same username (should return conflict)",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to create a customer with the same username (should return conflict)",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nawait agent2.post(`${urlBase2}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json')\n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(409);\n  })",
              "err": {},
              "uuid": "509383df-3cd3-4539-ad84-a8fa2f2533cf",
              "parentUUID": "1d088ddf-91e1-4c37-b518-40b8078f36f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update customer and check updated schema",
              "fullTitle": "Create a customer, update it and then delete all customers Update customer and check updated schema",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizados = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 9997\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallynewpassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent2.put(`${urlBase2}/api/customer/${id}`)\n  .send(datosActualizados)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n  expect(response.status).to.equal(200)\n  expect(response.body).to.be.jsonSchema(customerSchema.putCustomerSchema);\n  newId = response.body.customerId\n  newAddress = response.body.address",
              "err": {},
              "uuid": "75e4aee4-700e-42ea-be9e-a70ccb46e5f5",
              "parentUUID": "1d088ddf-91e1-4c37-b518-40b8078f36f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to update customer using an Id that doesn't exist",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to update customer using an Id that doesn't exist",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizados = \n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 9997\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallynewpassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nawait agent2.put(`${urlBase2}/api/customer/-1`)\n  .send(datosActualizados)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json')\n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(404);\n  })",
              "err": {},
              "uuid": "688d4043-b343-4011-80ea-647d7c77f48b",
              "parentUUID": "1d088ddf-91e1-4c37-b518-40b8078f36f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get updated customer's address and schema by Id",
              "fullTitle": "Create a customer, update it and then delete all customers Get updated customer's address and schema by Id",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent2.get(`${urlBase2}/api/customer/${newId}`)\n  .set('User-Agent', 'agent');    \n\nexpect(response.status).to.equal(200)\nexpect(response.body).to.be.jsonSchema(customerSchema.getCustomerSchema);\nexpect(response.body.address).to.equal(newAddress)",
              "err": {},
              "uuid": "10f96aaa-e9be-44f6-b9b1-aadd294d9976",
              "parentUUID": "1d088ddf-91e1-4c37-b518-40b8078f36f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to get a customer using an Id that doesn't exist",
              "fullTitle": "Create a customer, update it and then delete all customers Attempt to get a customer using an Id that doesn't exist",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent2.get(`${urlBase2}/api/customer/-1`)\n  .set('User-Agent', 'agent')    \n  .catch(error => {\n    //409 = conflict\n    expect(error.status).to.equal(404);\n  })",
              "err": {},
              "uuid": "1a70507f-de4c-4192-9713-51d0b8752461",
              "parentUUID": "1d088ddf-91e1-4c37-b518-40b8078f36f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete all costumers",
              "fullTitle": "Create a customer, update it and then delete all customers Delete all costumers",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent2.delete(`${urlBase2}/api/customer/`)\n  .set('User-Agent', 'agent')\n  //201 = no content\n  expect(response.status).to.equal(204)",
              "err": {},
              "uuid": "ff438208-0826-46ad-ad9d-d6944a68e307",
              "parentUUID": "1d088ddf-91e1-4c37-b518-40b8078f36f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "52332273-8339-437e-a340-673e5fd3ee63",
            "509383df-3cd3-4539-ad84-a8fa2f2533cf",
            "75e4aee4-700e-42ea-be9e-a70ccb46e5f5",
            "688d4043-b343-4011-80ea-647d7c77f48b",
            "10f96aaa-e9be-44f6-b9b1-aadd294d9976",
            "1a70507f-de4c-4192-9713-51d0b8752461",
            "ff438208-0826-46ad-ad9d-d6944a68e307"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 273,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "676e54b9-d773-43d1-b108-c2c39926fe3f",
          "title": "Get all products",
          "fullFile": "/home/juan/atsea-tests/test/api/getAllProducts.test.ts",
          "file": "/test/api/getAllProducts.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get all products",
              "fullTitle": "Get all products Get all products",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent.get(`${urlBase}/api/product/`)\n  .set('User-Agent', 'agent');\nchai.expect(response.status).to.equal(statusCode.StatusCodes.OK);\nchai.expect(response.body).length>0;",
              "err": {},
              "uuid": "070095bf-6a30-4baf-aa1c-584b5a7cb42a",
              "parentUUID": "676e54b9-d773-43d1-b108-c2c39926fe3f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "070095bf-6a30-4baf-aa1c-584b5a7cb42a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b65b4f9a-e1ab-4f64-ba5d-4306112009a3",
          "title": "Create a customer, login, make a purchase and finally delete it",
          "fullFile": "/home/juan/atsea-tests/test/api/loginAndPurchase.test.ts",
          "file": "/test/api/loginAndPurchase.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create customer",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Create customer",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datos = \n//El customer id que se envÃ­e no importa finalmente, no necesariamente se recibe el mismo\n{\n  \"customerId\" : 0,\n  \"name\"       : \"Sally Vallery\",\n  \"address\"    : \"144 Townsend, San Francisco 99999\",\n  \"email\"      : \"sally@example.com\",\n  \"phone\"      : \"513 222 5555\",\n  \"username\"   : \"sallyv\",\n  \"password\"   : \"sallypassword\",\n  \"enabled\"    : \"true\",\n  \"role\"       : \"USER\"\n}\nconst response = await agent3.post(`${urlBase3}/api/customer/`)\n  .send(datos)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\n//201 = created\nchai2.expect(response.status).equal(201)\nchai2.expect(response.body).length>0;\nid = response.body.customerId",
              "err": {},
              "uuid": "6bad8f02-9db9-4ad6-a0ae-21956f873ee4",
              "parentUUID": "b65b4f9a-e1ab-4f64-ba5d-4306112009a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Login",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv', password: 'sallypassword' })\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(200);\n      token = response.body.token",
              "err": {},
              "uuid": "01ffb633-1870-4529-8064-eee854a0a263",
              "parentUUID": "b65b4f9a-e1ab-4f64-ba5d-4306112009a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to login with wrong password",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to login with wrong password",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv', password: 'sallypassword2' })\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //401 = unauthorized\n    chai2.expect(error.status).to.equal(401);\n  });",
              "err": {},
              "uuid": "20cd5167-cb1d-4569-8b1b-a724a5f6e84e",
              "parentUUID": "b65b4f9a-e1ab-4f64-ba5d-4306112009a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to login with wrong username",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to login with wrong username",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.post(`${urlBase3}/login/`)\n  .send({ username : 'sallyv2', password: 'sallypassword' })\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //401 = unauthorized\n    chai2.expect(error.status).to.equal(404);\n  });",
              "err": {},
              "uuid": "a582d523-3201-48da-9bb9-c5a3312f9b02",
              "parentUUID": "b65b4f9a-e1ab-4f64-ba5d-4306112009a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Purchase",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Purchase",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.get(`${urlBase3}/purchase/`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(200);\n      chai2.expect(response.body).length>0;",
              "err": {},
              "uuid": "b95e9031-b09b-468d-aa76-ff2edb518cd6",
              "parentUUID": "b65b4f9a-e1ab-4f64-ba5d-4306112009a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete customer",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Delete customer",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent3.delete(`${urlBase3}/api/customer/${id}`)\n  .set('User-Agent', 'agent');    \n\n      chai2.expect(response.status).to.equal(204);",
              "err": {},
              "uuid": "5aa6eaf8-df0a-4737-817b-11f89cfc60f0",
              "parentUUID": "b65b4f9a-e1ab-4f64-ba5d-4306112009a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempt to purchase without logging in",
              "fullTitle": "Create a customer, login, make a purchase and finally delete it Attempt to purchase without logging in",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await agent3.delete(`${urlBase3}/api/customer/${id}`)\n  .set('User-Agent', 'agent')\n  .catch(error => {\n    //500 = Internal server error\n    chai2.expect(error.status).to.equal(404);\n});",
              "err": {},
              "uuid": "70ec1fe7-b426-45be-878d-370410224dad",
              "parentUUID": "b65b4f9a-e1ab-4f64-ba5d-4306112009a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6bad8f02-9db9-4ad6-a0ae-21956f873ee4",
            "01ffb633-1870-4529-8064-eee854a0a263",
            "20cd5167-cb1d-4569-8b1b-a724a5f6e84e",
            "a582d523-3201-48da-9bb9-c5a3312f9b02",
            "b95e9031-b09b-468d-aa76-ff2edb518cd6",
            "5aa6eaf8-df0a-4737-817b-11f89cfc60f0",
            "70ec1fe7-b426-45be-878d-370410224dad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 413,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0eab13d7-8675-4c2f-b3a5-633ea0d76fb7",
          "title": "Perform databasehealthchek and check container Id using schemas",
          "fullFile": "/home/juan/atsea-tests/test/api/systemUtilities.test.ts",
          "file": "/test/api/systemUtilities.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Databasehealthcheck",
              "fullTitle": "Perform databasehealthchek and check container Id using schemas Databasehealthcheck",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent4.get(`${urlBase4}/healthcheck/`)\n  .set('User-Agent', 'agent')\n  .set('Content-Type', 'application/json');    \n\nchai3.expect(response.status).equal(200)\nchai3.expect(response.body).to.be.jsonSchema(utilitiesSchema.getDatabaseHealthcheck);",
              "err": {},
              "uuid": "bf2ae8a0-d856-4493-a3d7-e9304f076d21",
              "parentUUID": "0eab13d7-8675-4c2f-b3a5-633ea0d76fb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login",
              "fullTitle": "Perform databasehealthchek and check container Id using schemas Login",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await agent4.get(`${urlBase4}/containerid/`)\n  .set('User-Agent', 'agent');    \n\n      chai3.expect(response.status).to.equal(200);\n      chai3.expect(response.body).to.be.jsonSchema(utilitiesSchema.getContainerId);",
              "err": {},
              "uuid": "952629be-3d92-42b2-bc1a-a10a7af5ec2c",
              "parentUUID": "0eab13d7-8675-4c2f-b3a5-633ea0d76fb7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bf2ae8a0-d856-4493-a3d7-e9304f076d21",
            "952629be-3d92-42b2-bc1a-a10a7af5ec2c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 57,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}